index de prueba
git init //iniciar el repositorio
$ git add nombre_de_archivo.extencion //Agregar el archivo al repositorio
git status //estdo del archivo
git rm o git rm --cached //eliminar
git comit //guardar el archivo en el repositorio -m "mensaje de cambios" //añadir un mensaje al comit para el futuro
------------------/*manejar el repo*/--------

$ git commit -m “Mensaje”// Agregamos los cambios para el repositorio
$ git add .// Agregar los cambios de la carpeta en la que nos encontramos agregar todo
$ git status // visualizar cambios
$ git log nombre_de_archivos.extencion //historico de cambios con detalles
$ git push //envia a otro repositorio remoto lo que estamos haciendo
$ git pull //traer repositorio remoto
$ ls //listado de carpetas en donde me encuentro es decir dir en windows
$ pwd //ubicacion actual
$ mkdir //make directori nueva carpeta
$ touch archivo.extencion//crear archivo vacio
$ cat archivo.extencion//muestra el contenido del archivo
$ history //historial de comandos utilizados durante esa sesion
$ rm archivo.extencion //eliminacion de archivo
$ comando --help //ayuda sobre el comando
$ checkout //traer cambios realizado
$ git rm --cached archivo.extencion//se usa para devolver el archivo que se tiene en ram cuando escribimos git add lo devuleve a estado natural mientra esta en staging
$ git config --list //muestra la lista de configuracion de git
$ git config --list --show-origin//rutas de acceso a la configuración de git
$ git log archivo.extencion //muestra la historia del archivo
$ git diff codigo(numeros en amarillo) codigo(numeros en amarillo)//muestra en una comparacion los ambios que se han echo a lo largo del archivo
$ git reset codigo(numeros en amarillo) --hard //borramos tdo y volvemos a la ulitma version
$ git reset codigo(numeros en amarillo) --soft //volvemos a la version anterior pero sigue el staging
$ git checkout #commit archivo.txt //volvemos a ver el archivo a la version del commit indicado, sin cambiar el staging
$ git checkout master #commit archivo.txt //volvemos a nuestro archivo actual
$ git commit -am "comentario" //es un (git add .) (y git commit -m "") unido en uno solo, solo sirve para archivos que antes fueron añadidos al staging con (git add.)

----------------/*RAMAS*/----------------------
$ git branch "nombre de la rama" //crea una nueva rama del lugar de origen en este caso master
$ git checkout "nombre de la rama" //me muevo entre las ramas del repositorio 
$ git branch //muestra las ramas del master
$ git merge "nombre_de_la_rama" -m "comentario" //unimos la rama invocada a la que estemos actualmente.

-------------------------------------------------cambio de "master" a "main" todo lo que diga master se refiere a main---------------------------------------
$ git branch -m <nombre-actual> <nombre-nuevo> //asi podemos cambiar el nombre de alguna rama de nuestro archivo git 

$ git remote add origin https://direccion //asi es como mandamos nuestro documento a git hub la url la conseguimos en el repositoria creado en la parde de dowloand
$ git remote set-url origin https://direccion // de esta forma podemos cambiar el origen si por alguna razon cambio o es otro  
$ git remote -v //vemos la direccion a la que esta originada nuetro documento
$ git push origin master // enviamos al repositorio nuestro archivo
$ git pull origin master //traenos todo lo del repositorio de git hub a nuestro git
$ git pull origin master --allow-unrelated-histories //es en casos aislados donde al ejecutar hit push no pueda por que hay cambios en el repositorio de git hub, esto hace que se fucionen sin importar los archivos

------------------------------------------llaves privadas y publicas---------------------------
$ ssh-keygen -t rsa -b 4096 -C "correo que este conectado a git hub" //creamos las llaves (investigar como poner passphrase contraseña con espacios) todo debe estar hubicado en la carpeta del HOME osea en ~ = Home
$ eval $(ssh-agent -s) //comprovamos que este funciondo bien i debe salir un mensaje "agent pid (numeros)"
$ ssh-add ~/.ssh/id_rsa //agregamos muestra llave al repositorio de git
$ git remote set-url origin git@github.com:direccion* //aqui cambiamos nuestra direccion de comunicacion con git hub y lo mandamos por el protocolo ssh
$ git log --all --graph --decorate --oneline //aqui podemos ver la hsitoria de nuestro repositorio
   //podemos crear alias en el bash de git ponemos: alias nombre_del_alias = "git log --all --graph --decorate --oneline"
$ git tag -a v0.1//esto cambia segun el numero de tag puede ser v de version osea v0.1 o v1.0... -m "primer tag" #numeros de la referenacia //ponemos un tag a 
$ git tag //muestra los tags
$ git show-ref --tags //muestra la referencia con el tag correspondiente

	/*primero hacer: "$git pull origin master"  para traernos todo del internet por si hubo algun cambio
<<<<<<< HEAD
		*/"$git push origin --tags" //enviamos los tags
	

 	      /*la rama master o main no deberia estar disponible por que si, debemos bloquearlo (caso de la vide real)
	      /*un pull request P.R es un estado intermedio antes del Merch, con estootras personas pueden ver el codigo y aprovar el merch. (P.R es una caracteristica de git hyb)

-----------------------------/* Comandos por si trabajo en una repositorio publico al cual no tengo acseso*/----------------
$git clone url:https://... //sirve para clonar el repositorio que previamente duplique con FORK en github, en mi carpeta 
 vi nombre_del_archivo //abrimos el archivo con el edittor de texto de consola esc + shift + z + z para salir 
$ git remote add upstream  <url> //crea otra fuente nueve parea trar datos de master 
$ git remote -v //vemos las opciones donde ponemos mandar o sacar informacion
   $ git pull "upstream" master //ahora como tenemos mas de dos referencias apra cominicarnos, debemos poner a cual direccion queremos enviar despues de "git pull" o "git push"


=======
		"$git push origin --tags" //enviamos los tags
	*/

-------------/* la rama master o main no deberia estar disponible por que si, debemos bloquearlo (caso de la vide real)
-------------/*un pull request P.R es un estado intermedio antes del Merch, con estootras personas pueden ver el codigo y aprovar el merch. (P.R es una caracteristica de git hyb)
>>>>>>> 43682f61655476429aed4a427982e1560d765a70
